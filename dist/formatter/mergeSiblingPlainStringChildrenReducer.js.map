{"version":3,"sources":["../../src/formatter/mergeSiblingPlainStringChildrenReducer.js"],"names":["previousNodes","currentNode","lastNode","length","newNode","type","value","String","push"],"mappings":";;;;;;;;kBAIe,UACbA,aADa,EAEbC,WAFa,EAGE;AACf,MAAMC,WAAWF,cAAcA,cAAcG,MAAd,GAAuB,CAArC,CAAjB;AACA,MAAMC,uBAAeH,WAAf,CAAN;;AAEA,MAAIG,QAAQC,IAAR,KAAiB,QAArB,EAA+B;AAC7BD,YAAQC,IAAR,GAAe,QAAf;AACAD,YAAQE,KAAR,GAAgBC,OAAOH,QAAQE,KAAf,CAAhB;AACD;;AAED,MACEJ,YACAA,SAASG,IAAT,KAAkB,QADlB,IAEA,OAAOH,SAASI,KAAhB,KAA0B,QAF1B,IAGAF,QAAQC,IAAR,KAAiB,QAJnB,EAKE;AACAH,aAASI,KAAT,IAAkBF,QAAQE,KAAR,IAAiB,EAAnC;AACD,GAPD,MAOO;AACLN,kBAAcQ,IAAd,CAAmBJ,OAAnB;AACD;;AAED,SAAOJ,aAAP;AACD,C","file":"mergeSiblingPlainStringChildrenReducer.js","sourcesContent":["/* @flow */\n\nimport type { TreeNode } from './../tree';\n\nexport default (\n  previousNodes: TreeNode[],\n  currentNode: TreeNode\n): TreeNode[] => {\n  const lastNode = previousNodes[previousNodes.length - 1];\n  const newNode = { ...currentNode };\n\n  if (newNode.type === 'number') {\n    newNode.type = 'string';\n    newNode.value = String(newNode.value);\n  }\n\n  if (\n    lastNode &&\n    lastNode.type === 'string' &&\n    typeof lastNode.value === 'string' &&\n    newNode.type === 'string'\n  ) {\n    lastNode.value += newNode.value || '';\n  } else {\n    previousNodes.push(newNode);\n  }\n\n  return previousNodes;\n};\n"]}