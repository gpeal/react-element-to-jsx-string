{"version":3,"sources":["../../src/formatter/formatTreeNode.js"],"names":["escape","s","replace","node","inline","lvl","options","type","value","toString","TypeError"],"mappings":";;;;;;AAEA;;;;;;AAIA,IAAMA,SAAS,SAATA,MAAS,CAACC,CAAD;AAAA,SACbA,EAAEC,OAAF,CAAU,IAAV,EAAgB,UAAhB,EAA4BA,OAA5B,CAAoC,IAApC,EAA0C,UAA1C,CADa;AAAA,CAAf;;kBAGe,UACbC,IADa,EAEbC,MAFa,EAGbC,GAHa,EAIbC,OAJa,EAKF;AACX,MAAIH,KAAKI,IAAL,KAAc,QAAd,IAA0BJ,KAAKI,IAAL,KAAc,QAA5C,EAAsD;AACpD,WAAOJ,KAAKK,KAAL,GAAaR,OAAOG,KAAKK,KAAL,CAAWC,QAAX,EAAP,CAAb,GAA6C,EAApD;AACD;;AAED,MAAIN,KAAKI,IAAL,KAAc,cAAlB,EAAkC;AAChC,WAAO,sCAAuBJ,IAAvB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,OAA1C,CAAP;AACD;;AAED,QAAM,IAAII,SAAJ,0BAAqCP,KAAKI,IAA1C,OAAN;AACD,C","file":"formatTreeNode.js","sourcesContent":["/* @flow */\n\nimport formatReactElementNode from './formatReactElementNode';\nimport type { Options } from './../options';\nimport type { TreeNode } from './../tree';\n\nconst escape = (s: string): string =>\n  s.replace(/{/g, '&lbrace;').replace(/}/g, '&rbrace;');\n\nexport default (\n  node: TreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (node.type === 'string' || node.type === 'number') {\n    return node.value ? escape(node.value.toString()) : '';\n  }\n\n  if (node.type === 'ReactElement') {\n    return formatReactElementNode(node, inline, lvl, options);\n  }\n\n  throw new TypeError(`Unknow format type \"${node.type}\"`);\n};\n"]}